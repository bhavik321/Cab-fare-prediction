{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cabboking","provenance":[],"collapsed_sections":[],"mount_file_id":"1-I81-JJqs8dmglVg9fmFKMyCgMpCOfuj","authorship_tag":"ABX9TyOd9s/aDCkvgA68Gim+bmyP"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eCL04Ond6pt7","executionInfo":{"status":"ok","timestamp":1622193407606,"user_tz":-330,"elapsed":25443,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"cf6fae75-eedd-4c66-f8e3-03b793120b99"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":415},"id":"pu3tPIOz6t7T","executionInfo":{"status":"ok","timestamp":1621067236892,"user_tz":-330,"elapsed":2901,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"f2fb318d-582f-4e8c-8634-bbfb57e97cfa"},"source":["import pandas as pd\n","import numpy as np\n","from sklearn.ensemble import RandomForestRegressor,RandomForestClassifier\n","import matplotlib.pyplot as plt\n","df=pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/TRAIN.csv')\n","df=df[[\"distance\",\"surge_multiplier\",\"cab_provider\",\"cab_type\",\"fare\"]]\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>distance</th>\n","      <th>surge_multiplier</th>\n","      <th>cab_provider</th>\n","      <th>cab_type</th>\n","      <th>fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.03</td>\n","      <td>1.0</td>\n","      <td>Lyft</td>\n","      <td>Lux Black XL</td>\n","      <td>34.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.30</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>Black</td>\n","      <td>18.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.71</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>UberX</td>\n","      <td>19.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2.43</td>\n","      <td>1.0</td>\n","      <td>Lyft</td>\n","      <td>Lyft</td>\n","      <td>10.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.71</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>UberXL</td>\n","      <td>32.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>99995</th>\n","      <td>1.16</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>UberXL</td>\n","      <td>12.0</td>\n","    </tr>\n","    <tr>\n","      <th>99996</th>\n","      <td>1.16</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>Black SUV</td>\n","      <td>26.0</td>\n","    </tr>\n","    <tr>\n","      <th>99997</th>\n","      <td>1.16</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>Black</td>\n","      <td>16.0</td>\n","    </tr>\n","    <tr>\n","      <th>99998</th>\n","      <td>1.16</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>UberX</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>99999</th>\n","      <td>1.23</td>\n","      <td>1.0</td>\n","      <td>Uber</td>\n","      <td>UberX</td>\n","      <td>7.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100000 rows × 5 columns</p>\n","</div>"],"text/plain":["       distance  surge_multiplier cab_provider      cab_type  fare\n","0          3.03               1.0         Lyft  Lux Black XL  34.0\n","1          1.30               1.0         Uber         Black  18.5\n","2          2.71               1.0         Uber         UberX  19.5\n","3          2.43               1.0         Lyft          Lyft  10.5\n","4          2.71               1.0         Uber        UberXL  32.0\n","...         ...               ...          ...           ...   ...\n","99995      1.16               1.0         Uber        UberXL  12.0\n","99996      1.16               1.0         Uber     Black SUV  26.0\n","99997      1.16               1.0         Uber         Black  16.0\n","99998      1.16               1.0         Uber         UberX   7.0\n","99999      1.23               1.0         Uber         UberX   7.0\n","\n","[100000 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"MYlq-PoAnP29"},"source":["#df['time_stamp'] = df.time_stamp.apply(lambda x: pd.to_datetime(x,unit='ms'))\n","#df[\"hour\"]=df.time_stamp.apply(lambda x: pd.Timestamp(x).hour)\n","#df=df[[\"distance\",\"surge_multiplier\",\"hour\",\"cab_provider\",\"cab_type\",\"fare\"]]\n","#df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jXEllD42Itjk"},"source":["#np.unique(df['cab_type'])\n","df[\"cab_provider\"].replace([\"Lyft\",\"Uber\"],[0,1],inplace=True)\n","df[\"cab_type\"].replace(['Black', 'Black SUV', 'Lux', 'Lux Black', 'Lux Black XL', 'Lyft','Lyft XL', 'Shared', 'UberPool', 'UberX', 'UberXL', 'WAV'],[1,2,3,4,5,6,7,8,9,10,11,12],inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y6ldcnt97I2K"},"source":["x = df.iloc[:, 0:4].values\n","y = df.iloc[:, 4].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zylb8T4lMERR","executionInfo":{"status":"ok","timestamp":1621069481835,"user_tz":-330,"elapsed":64649,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"6b3c1eb9-b70b-486d-a547-54edc276e220"},"source":["regressor = RandomForestRegressor(n_estimators = 1500, random_state = 1,max_features=3,bootstrap=True,oob_score=True,min_weight_fraction_leaf=0.0015)\n","#regressor = RandomForestRegressor(n_estimators = 1000, random_state = 0)\n","regressor.fit(x,y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n","                      max_depth=None, max_features=3, max_leaf_nodes=None,\n","                      max_samples=None, min_impurity_decrease=0.0,\n","                      min_impurity_split=None, min_samples_leaf=1,\n","                      min_samples_split=2, min_weight_fraction_leaf=0.0015,\n","                      n_estimators=1500, n_jobs=None, oob_score=True,\n","                      random_state=1, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":207}]},{"cell_type":"code","metadata":{"id":"bhTik7ACMxG0"},"source":["df1=pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/TEST.csv')\n","df1=df1[[\"distance\",\"surge_multiplier\",\"cab_provider\",\"cab_type\"]]\n","df1[\"cab_provider\"].replace([\"Lyft\",\"Uber\"],[0,1],inplace=True)\n","df1[\"cab_type\"].replace(['Black', 'Black SUV', 'Lux', 'Lux Black', 'Lux Black XL', 'Lyft','Lyft XL', 'Shared', 'UberPool', 'UberX', 'UberXL', 'WAV'],[1,2,3,4,5,6,7,8,9,10,11,12],inplace=True)\n","\n","#df1['time_stamp'] = df1.time_stamp.apply(lambda x: pd.to_datetime(x,unit='ms'))\n","#df1[\"hour\"]=df1.time_stamp.apply(lambda x: pd.Timestamp(x).hour)\n","#df1=df1[[\"distance\",\"surge_multiplier\",\"hour\",\"cab_provider\",\"cab_type\"]]\n","#df1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7qCYoU3pPdNb","executionInfo":{"status":"ok","timestamp":1621069481836,"user_tz":-330,"elapsed":63848,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"abea4ba2-a0cc-48bb-c7c8-f97ebcd6cc3a"},"source":["x_test = df1.iloc[:, 0:4].values\n","x_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.59,  1.  ,  0.  ,  3.  ],\n","       [ 0.59,  1.  ,  0.  ,  5.  ],\n","       [ 6.83,  1.  ,  1.  , 10.  ],\n","       ...,\n","       [ 3.05,  1.  ,  1.  ,  2.  ],\n","       [ 2.96,  1.  ,  0.  ,  8.  ],\n","       [ 2.96,  1.  ,  0.  ,  3.  ]])"]},"metadata":{"tags":[]},"execution_count":209}]},{"cell_type":"code","metadata":{"id":"uII37GKhP9I8"},"source":["pred = regressor.predict(x_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sk0NfEOfQi0I","executionInfo":{"status":"ok","timestamp":1621069485355,"user_tz":-330,"elapsed":66737,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"8862094c-0e08-4bcf-9ec6-1e442a79fc8e"},"source":["print(pred[0:12])\n","a=np.array([11,26,18.5,11.5,9,10.5,7,7,26,5,32.5,19.5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[10.98104277 26.95270023 15.49975677 13.10575291 10.0105868  10.21404263\n","  5.29734278  6.98604626 28.0542772   5.63752012 34.5475779  20.74912343]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9uVpGOV-SAJ6"},"source":["index=[i for i in range(25000)]\n","\n","df = pd.DataFrame({\"index\" : index, \"fare\" : pred})\n","df.to_csv(\"/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/submission1.csv\", index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KiwY-LjrT82V","executionInfo":{"elapsed":1455,"status":"ok","timestamp":1618408573666,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"},"user_tz":-330},"outputId":"42d99d57-0143-4c74-d4bf-ed7dfb774dc1"},"source":["np.unique(df1[\"cab_type\"])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"zn_XGaG7UBMz"},"source":["#Neural net"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5T-_0ZSbsQ8_","executionInfo":{"status":"ok","timestamp":1622193452537,"user_tz":-330,"elapsed":410,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import OneHotEncoder\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from sklearn.ensemble import RandomForestRegressor,RandomForestClassifier\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.callbacks import ModelCheckpoint\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Activation, Flatten,Dropout,BatchNormalization\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_absolute_error \n","from matplotlib import pyplot as plt\n","import seaborn as sb\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np\n","import warnings \n","warnings.filterwarnings('ignore')\n","warnings.filterwarnings('ignore', category=DeprecationWarning)\n","from xgboost import XGBRegressor\n","from tensorflow.keras import backend as K\n","from kerastuner.tuners import RandomSearch"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dsyuTqrcAeIm","executionInfo":{"status":"ok","timestamp":1622193448402,"user_tz":-330,"elapsed":7071,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"31dc3120-2092-4963-9095-c7bca21e8743"},"source":["!pip install keras-tuner"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting keras-tuner\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/20/ec/1ef246787174b1e2bb591c95f29d3c1310070cad877824f907faba3dade9/keras-tuner-1.0.2.tar.gz (62kB)\n","\r\u001b[K     |█████▏                          | 10kB 15.8MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 20kB 9.4MB/s eta 0:00:01\r\u001b[K     |███████████████▋                | 30kB 5.8MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 40kB 5.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 51kB 2.9MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 61kB 3.2MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 71kB 2.7MB/s \n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (20.9)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.16.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.19.5)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.8.9)\n","Collecting terminaltables\n","  Downloading https://files.pythonhosted.org/packages/9b/c4/4a21174f32f8a7e1104798c445dacdc1d4df86f2f26722767034e4de4bff/terminaltables-3.1.0.tar.gz\n","Collecting colorama\n","  Downloading https://files.pythonhosted.org/packages/44/98/5b86278fbbf250d239ae0ecb724f8572af1c91f4a11edf4d36a206189440/colorama-0.4.4-py2.py3-none-any.whl\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (4.41.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (2.23.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (1.4.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from keras-tuner) (0.22.2.post1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->keras-tuner) (2.4.7)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (2020.12.5)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->keras-tuner) (3.0.4)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->keras-tuner) (1.0.1)\n","Building wheels for collected packages: keras-tuner, terminaltables\n","  Building wheel for keras-tuner (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for keras-tuner: filename=keras_tuner-1.0.2-cp37-none-any.whl size=78938 sha256=b771d8dd85fa93d03ca98e8d197280cc985bd70c7515d5f872ec682f52ad6a82\n","  Stored in directory: /root/.cache/pip/wheels/bb/a1/8a/7c3de0efb3707a1701b36ebbfdbc4e67aedf6d4943a1f463d6\n","  Building wheel for terminaltables (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for terminaltables: filename=terminaltables-3.1.0-cp37-none-any.whl size=15356 sha256=436c15fa21c20122a863c60bedab3cc063ed3419b7865b90fb200b93bf6af17a\n","  Stored in directory: /root/.cache/pip/wheels/30/6b/50/6c75775b681fb36cdfac7f19799888ef9d8813aff9e379663e\n","Successfully built keras-tuner terminaltables\n","Installing collected packages: terminaltables, colorama, keras-tuner\n","Successfully installed colorama-0.4.4 keras-tuner-1.0.2 terminaltables-3.1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OGFnFV6ksVPx","executionInfo":{"status":"ok","timestamp":1622193460516,"user_tz":-330,"elapsed":1535,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["df=pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/TRAIN.csv')\n","df=df[[\"distance\",\"surge_multiplier\",\"cab_provider\",\"cab_type\",\"fare\"]]\n","#np.unique(df['cab_type'])\n","df[\"cab_provider\"].replace([\"Lyft\",\"Uber\"],[0,1],inplace=True)\n","df[\"cab_type\"].replace(['Black', 'Black SUV', 'Lux', 'Lux Black', 'Lux Black XL', 'Lyft','Lyft XL', 'Shared', 'UberPool', 'UberX', 'UberXL', 'WAV'],[1,2,3,4,5,6,7,8,9,10,11,12],inplace=True)\n","x = df.iloc[:, 0:4].values\n","y = df.iloc[:, 4].values"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-mvneTiasyUK","executionInfo":{"status":"ok","timestamp":1622193464982,"user_tz":-330,"elapsed":436,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"4eeed8a0-b517-4612-d703-e590ea568b4f"},"source":["x[:,0].shape"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100000,)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dT0oAei6szKI","executionInfo":{"status":"ok","timestamp":1622193466503,"user_tz":-330,"elapsed":7,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"68bd0f30-4311-4e11-ac50-2609156edcd2"},"source":["#label_encoder = LabelEncoder()\n","#integer_encoded = label_encoder.fit_transform(x[:,1])\n","#onehot_encoder = OneHotEncoder(sparse=False)\n","#integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","#one = onehot_encoder.fit_transform(integer_encoded)\n","#print(one.shape)\n","div=np.max(x[:,1])\n","x[:,1]=x[:,1]/div\n","x"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 3.03      ,  0.33333333,  0.        ,  5.        ],\n","       [ 1.3       ,  0.33333333,  1.        ,  1.        ],\n","       [ 2.71      ,  0.33333333,  1.        , 10.        ],\n","       ...,\n","       [ 1.16      ,  0.33333333,  1.        ,  1.        ],\n","       [ 1.16      ,  0.33333333,  1.        , 10.        ],\n","       [ 1.23      ,  0.33333333,  1.        , 10.        ]])"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4buZRyoxuL4f","executionInfo":{"status":"ok","timestamp":1622193468163,"user_tz":-330,"elapsed":9,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"138e5f51-0ea8-48a6-cf54-ade9d1341f13"},"source":["label_encoder = LabelEncoder()\n","integer_encoded = label_encoder.fit_transform(x[:,2])\n","onehot_encoder = OneHotEncoder(sparse=False)\n","integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","two = onehot_encoder.fit_transform(integer_encoded)\n","print(two.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(100000, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-p32bOlLux5v","executionInfo":{"status":"ok","timestamp":1622193469946,"user_tz":-330,"elapsed":8,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"268786ea-9dda-47e8-e7d4-bf8108f1379d"},"source":["label_encoder = LabelEncoder()\n","integer_encoded = label_encoder.fit_transform(x[:,3])\n","onehot_encoder = OneHotEncoder(sparse=False)\n","integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","three = onehot_encoder.fit_transform(integer_encoded)\n","print(three.shape)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["(100000, 12)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NPO3XXtCu_w-","executionInfo":{"status":"ok","timestamp":1622193471582,"user_tz":-330,"elapsed":6,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"2fef1ca1-3a07-4361-c845-351a9d4bc8ce"},"source":["x=np.concatenate((x[:,0].reshape(100000,1),x[:,1].reshape(100000,1),two,three),axis=1)\n","x.shape"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100000, 16)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x0m5T_s9je33","executionInfo":{"status":"ok","timestamp":1622193473319,"user_tz":-330,"elapsed":6,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"f2fba387-ae6c-471a-8599-f9d381f17b0c"},"source":["div=np.max(x[:,0])\n","x[:,0]=x[:,0]/div\n","x"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.404     , 0.33333333, 1.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.17333333, 0.33333333, 0.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.36133333, 0.33333333, 0.        , ..., 1.        , 0.        ,\n","        0.        ],\n","       ...,\n","       [0.15466667, 0.33333333, 0.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.15466667, 0.33333333, 0.        , ..., 1.        , 0.        ,\n","        0.        ],\n","       [0.164     , 0.33333333, 0.        , ..., 1.        , 0.        ,\n","        0.        ]])"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"Ms7ZAJXjka6y","executionInfo":{"status":"ok","timestamp":1622193475272,"user_tz":-330,"elapsed":3,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["def root_mean_squared_error(y_true, y_pred):\n","        return K.sqrt(K.mean(K.square(y_pred - y_true))) "],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gFnFQDMLvZ_z","executionInfo":{"status":"ok","timestamp":1622193477475,"user_tz":-330,"elapsed":655,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"17b67baa-bef5-4460-e9f3-bef5dfb96d20"},"source":["NN_model = Sequential()\n","\n","# The Input Layer :\n","NN_model.add(Dense(24, kernel_initializer=tf.keras.initializers.HeNormal(),input_dim = x.shape[1], activation='relu'))\n","\n","# The Hidden Layers :\n","NN_model.add(Dense(6, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(17, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(27, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(27, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(13, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(8, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(14, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(13, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(26, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(14, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(14, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(28, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(24, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(16, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(14, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","NN_model.add(Dense(6, kernel_initializer=tf.keras.initializers.HeNormal(),activation='relu'))\n","NN_model.add(BatchNormalization())\n","# The Output Layer :\n","NN_model.add(Dense(1, kernel_initializer=tf.keras.initializers.HeNormal(),activation='linear'))\n","\n","# Compile the network :\n","opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n","NN_model.compile(loss=root_mean_squared_error, optimizer=opt, metrics=[tf.keras.metrics.RootMeanSquaredError()])\n","NN_model.summary()\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 24)                408       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 6)                 150       \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 6)                 24        \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 17)                119       \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 17)                68        \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 27)                486       \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 27)                108       \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 27)                756       \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 27)                108       \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 13)                364       \n","_________________________________________________________________\n","batch_normalization_4 (Batch (None, 13)                52        \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 8)                 112       \n","_________________________________________________________________\n","batch_normalization_5 (Batch (None, 8)                 32        \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 14)                126       \n","_________________________________________________________________\n","batch_normalization_6 (Batch (None, 14)                56        \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 13)                195       \n","_________________________________________________________________\n","batch_normalization_7 (Batch (None, 13)                52        \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 26)                364       \n","_________________________________________________________________\n","batch_normalization_8 (Batch (None, 26)                104       \n","_________________________________________________________________\n","dense_10 (Dense)             (None, 14)                378       \n","_________________________________________________________________\n","batch_normalization_9 (Batch (None, 14)                56        \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 14)                210       \n","_________________________________________________________________\n","batch_normalization_10 (Batc (None, 14)                56        \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 28)                420       \n","_________________________________________________________________\n","batch_normalization_11 (Batc (None, 28)                112       \n","_________________________________________________________________\n","dense_13 (Dense)             (None, 24)                696       \n","_________________________________________________________________\n","batch_normalization_12 (Batc (None, 24)                96        \n","_________________________________________________________________\n","dense_14 (Dense)             (None, 16)                400       \n","_________________________________________________________________\n","batch_normalization_13 (Batc (None, 16)                64        \n","_________________________________________________________________\n","dense_15 (Dense)             (None, 14)                238       \n","_________________________________________________________________\n","batch_normalization_14 (Batc (None, 14)                56        \n","_________________________________________________________________\n","dense_16 (Dense)             (None, 6)                 90        \n","_________________________________________________________________\n","batch_normalization_15 (Batc (None, 6)                 24        \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 1)                 7         \n","=================================================================\n","Total params: 6,587\n","Trainable params: 6,053\n","Non-trainable params: 534\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Rk44aOESwRFe","executionInfo":{"status":"ok","timestamp":1622193498238,"user_tz":-330,"elapsed":404,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["checkpoint_name = '/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-{epoch:03d}--{val_loss:.5f}.hdf5' \n","checkpoint = ModelCheckpoint(checkpoint_name, monitor='val_loss', verbose = 1, save_best_only = True, mode ='auto')\n","callbacks_list = [checkpoint]\n"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qMdilFfKwwEw","executionInfo":{"status":"ok","timestamp":1622194960407,"user_tz":-330,"elapsed":1445434,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"b6dbc273-a72f-4b03-ef61-b9c67f480c66"},"source":["NN_model1=NN_model.fit(x, y, epochs=100, batch_size=32, validation_split = 0.3, callbacks=callbacks_list)\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","2188/2188 [==============================] - 19s 7ms/step - loss: 7.6766 - root_mean_squared_error: 9.4134 - val_loss: 2.4353 - val_root_mean_squared_error: 2.6008\n","\n","Epoch 00001: val_loss improved from inf to 2.43527, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-001--2.43527.hdf5\n","Epoch 2/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 3.1779 - root_mean_squared_error: 3.3301 - val_loss: 2.4967 - val_root_mean_squared_error: 2.5958\n","\n","Epoch 00002: val_loss did not improve from 2.43527\n","Epoch 3/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.9780 - root_mean_squared_error: 3.1355 - val_loss: 1.9645 - val_root_mean_squared_error: 2.0858\n","\n","Epoch 00003: val_loss improved from 2.43527 to 1.96446, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-003--1.96446.hdf5\n","Epoch 4/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.8699 - root_mean_squared_error: 3.0295 - val_loss: 1.9454 - val_root_mean_squared_error: 2.0749\n","\n","Epoch 00004: val_loss improved from 1.96446 to 1.94542, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-004--1.94542.hdf5\n","Epoch 5/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.7441 - root_mean_squared_error: 2.9003 - val_loss: 1.9206 - val_root_mean_squared_error: 2.0468\n","\n","Epoch 00005: val_loss improved from 1.94542 to 1.92055, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-005--1.92055.hdf5\n","Epoch 6/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.6886 - root_mean_squared_error: 2.8323 - val_loss: 2.0641 - val_root_mean_squared_error: 2.1863\n","\n","Epoch 00006: val_loss did not improve from 1.92055\n","Epoch 7/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.6779 - root_mean_squared_error: 2.8286 - val_loss: 2.1893 - val_root_mean_squared_error: 2.3321\n","\n","Epoch 00007: val_loss did not improve from 1.92055\n","Epoch 8/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.6110 - root_mean_squared_error: 2.7640 - val_loss: 2.1111 - val_root_mean_squared_error: 2.2333\n","\n","Epoch 00008: val_loss did not improve from 1.92055\n","Epoch 9/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5906 - root_mean_squared_error: 2.7367 - val_loss: 1.8431 - val_root_mean_squared_error: 1.9770\n","\n","Epoch 00009: val_loss improved from 1.92055 to 1.84307, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-009--1.84307.hdf5\n","Epoch 10/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5604 - root_mean_squared_error: 2.7150 - val_loss: 1.9976 - val_root_mean_squared_error: 2.0996\n","\n","Epoch 00010: val_loss did not improve from 1.84307\n","Epoch 11/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5549 - root_mean_squared_error: 2.7007 - val_loss: 2.1349 - val_root_mean_squared_error: 2.2431\n","\n","Epoch 00011: val_loss did not improve from 1.84307\n","Epoch 12/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5303 - root_mean_squared_error: 2.6758 - val_loss: 1.9526 - val_root_mean_squared_error: 2.0862\n","\n","Epoch 00012: val_loss did not improve from 1.84307\n","Epoch 13/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5060 - root_mean_squared_error: 2.6618 - val_loss: 1.8695 - val_root_mean_squared_error: 2.0081\n","\n","Epoch 00013: val_loss did not improve from 1.84307\n","Epoch 14/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.5060 - root_mean_squared_error: 2.6532 - val_loss: 1.8344 - val_root_mean_squared_error: 1.9700\n","\n","Epoch 00014: val_loss improved from 1.84307 to 1.83436, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-014--1.83436.hdf5\n","Epoch 15/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4972 - root_mean_squared_error: 2.6417 - val_loss: 2.0237 - val_root_mean_squared_error: 2.1502\n","\n","Epoch 00015: val_loss did not improve from 1.83436\n","Epoch 16/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4874 - root_mean_squared_error: 2.6242 - val_loss: 2.0310 - val_root_mean_squared_error: 2.1540\n","\n","Epoch 00016: val_loss did not improve from 1.83436\n","Epoch 17/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4819 - root_mean_squared_error: 2.6251 - val_loss: 1.8401 - val_root_mean_squared_error: 1.9543\n","\n","Epoch 00017: val_loss did not improve from 1.83436\n","Epoch 18/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4651 - root_mean_squared_error: 2.6024 - val_loss: 1.8544 - val_root_mean_squared_error: 1.9896\n","\n","Epoch 00018: val_loss did not improve from 1.83436\n","Epoch 19/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4575 - root_mean_squared_error: 2.6031 - val_loss: 1.8249 - val_root_mean_squared_error: 1.9504\n","\n","Epoch 00019: val_loss improved from 1.83436 to 1.82494, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-019--1.82494.hdf5\n","Epoch 20/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4435 - root_mean_squared_error: 2.5860 - val_loss: 1.7851 - val_root_mean_squared_error: 1.9193\n","\n","Epoch 00020: val_loss improved from 1.82494 to 1.78511, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-020--1.78511.hdf5\n","Epoch 21/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4766 - root_mean_squared_error: 2.6234 - val_loss: 1.9129 - val_root_mean_squared_error: 2.0400\n","\n","Epoch 00021: val_loss did not improve from 1.78511\n","Epoch 22/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4615 - root_mean_squared_error: 2.6109 - val_loss: 1.8182 - val_root_mean_squared_error: 1.9462\n","\n","Epoch 00022: val_loss did not improve from 1.78511\n","Epoch 23/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4077 - root_mean_squared_error: 2.5526 - val_loss: 1.7609 - val_root_mean_squared_error: 1.8834\n","\n","Epoch 00023: val_loss improved from 1.78511 to 1.76091, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-023--1.76091.hdf5\n","Epoch 24/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4321 - root_mean_squared_error: 2.5720 - val_loss: 1.9370 - val_root_mean_squared_error: 2.0696\n","\n","Epoch 00024: val_loss did not improve from 1.76091\n","Epoch 25/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4264 - root_mean_squared_error: 2.5747 - val_loss: 1.8178 - val_root_mean_squared_error: 1.9522\n","\n","Epoch 00025: val_loss did not improve from 1.76091\n","Epoch 26/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4423 - root_mean_squared_error: 2.5877 - val_loss: 1.7391 - val_root_mean_squared_error: 1.8724\n","\n","Epoch 00026: val_loss improved from 1.76091 to 1.73911, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-026--1.73911.hdf5\n","Epoch 27/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4087 - root_mean_squared_error: 2.5490 - val_loss: 1.7847 - val_root_mean_squared_error: 1.9165\n","\n","Epoch 00027: val_loss did not improve from 1.73911\n","Epoch 28/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4426 - root_mean_squared_error: 2.5970 - val_loss: 1.8078 - val_root_mean_squared_error: 1.9335\n","\n","Epoch 00028: val_loss did not improve from 1.73911\n","Epoch 29/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4169 - root_mean_squared_error: 2.5630 - val_loss: 1.7490 - val_root_mean_squared_error: 1.8869\n","\n","Epoch 00029: val_loss did not improve from 1.73911\n","Epoch 30/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4265 - root_mean_squared_error: 2.5703 - val_loss: 1.7537 - val_root_mean_squared_error: 1.8974\n","\n","Epoch 00030: val_loss did not improve from 1.73911\n","Epoch 31/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4140 - root_mean_squared_error: 2.5714 - val_loss: 1.9075 - val_root_mean_squared_error: 2.0308\n","\n","Epoch 00031: val_loss did not improve from 1.73911\n","Epoch 32/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4178 - root_mean_squared_error: 2.5689 - val_loss: 1.7775 - val_root_mean_squared_error: 1.9071\n","\n","Epoch 00032: val_loss did not improve from 1.73911\n","Epoch 33/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4564 - root_mean_squared_error: 2.6015 - val_loss: 1.8591 - val_root_mean_squared_error: 1.9942\n","\n","Epoch 00033: val_loss did not improve from 1.73911\n","Epoch 34/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4191 - root_mean_squared_error: 2.5632 - val_loss: 1.8018 - val_root_mean_squared_error: 1.9249\n","\n","Epoch 00034: val_loss did not improve from 1.73911\n","Epoch 35/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4139 - root_mean_squared_error: 2.5624 - val_loss: 1.7877 - val_root_mean_squared_error: 1.9176\n","\n","Epoch 00035: val_loss did not improve from 1.73911\n","Epoch 36/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4161 - root_mean_squared_error: 2.5634 - val_loss: 1.7728 - val_root_mean_squared_error: 1.8983\n","\n","Epoch 00036: val_loss did not improve from 1.73911\n","Epoch 37/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3867 - root_mean_squared_error: 2.5275 - val_loss: 1.7989 - val_root_mean_squared_error: 1.9208\n","\n","Epoch 00037: val_loss did not improve from 1.73911\n","Epoch 38/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3922 - root_mean_squared_error: 2.5368 - val_loss: 1.8097 - val_root_mean_squared_error: 1.9530\n","\n","Epoch 00038: val_loss did not improve from 1.73911\n","Epoch 39/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.4073 - root_mean_squared_error: 2.5522 - val_loss: 1.9013 - val_root_mean_squared_error: 2.0474\n","\n","Epoch 00039: val_loss did not improve from 1.73911\n","Epoch 40/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4007 - root_mean_squared_error: 2.5429 - val_loss: 1.7672 - val_root_mean_squared_error: 1.8972\n","\n","Epoch 00040: val_loss did not improve from 1.73911\n","Epoch 41/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4346 - root_mean_squared_error: 2.5778 - val_loss: 1.9449 - val_root_mean_squared_error: 2.0657\n","\n","Epoch 00041: val_loss did not improve from 1.73911\n","Epoch 42/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.4025 - root_mean_squared_error: 2.5559 - val_loss: 1.8217 - val_root_mean_squared_error: 1.9518\n","\n","Epoch 00042: val_loss did not improve from 1.73911\n","Epoch 43/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4072 - root_mean_squared_error: 2.5578 - val_loss: 1.7925 - val_root_mean_squared_error: 1.9244\n","\n","Epoch 00043: val_loss did not improve from 1.73911\n","Epoch 44/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3837 - root_mean_squared_error: 2.5241 - val_loss: 1.7815 - val_root_mean_squared_error: 1.9129\n","\n","Epoch 00044: val_loss did not improve from 1.73911\n","Epoch 45/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3975 - root_mean_squared_error: 2.5468 - val_loss: 1.7369 - val_root_mean_squared_error: 1.8772\n","\n","Epoch 00045: val_loss improved from 1.73911 to 1.73695, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-045--1.73695.hdf5\n","Epoch 46/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.4219 - root_mean_squared_error: 2.5718 - val_loss: 1.8462 - val_root_mean_squared_error: 1.9929\n","\n","Epoch 00046: val_loss did not improve from 1.73695\n","Epoch 47/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3502 - root_mean_squared_error: 2.4945 - val_loss: 1.9072 - val_root_mean_squared_error: 2.0403\n","\n","Epoch 00047: val_loss did not improve from 1.73695\n","Epoch 48/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3965 - root_mean_squared_error: 2.5417 - val_loss: 1.7626 - val_root_mean_squared_error: 1.9053\n","\n","Epoch 00048: val_loss did not improve from 1.73695\n","Epoch 49/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3845 - root_mean_squared_error: 2.5302 - val_loss: 1.9410 - val_root_mean_squared_error: 2.0948\n","\n","Epoch 00049: val_loss did not improve from 1.73695\n","Epoch 50/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3775 - root_mean_squared_error: 2.5153 - val_loss: 1.7823 - val_root_mean_squared_error: 1.9268\n","\n","Epoch 00050: val_loss did not improve from 1.73695\n","Epoch 51/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3605 - root_mean_squared_error: 2.5012 - val_loss: 1.7720 - val_root_mean_squared_error: 1.9121\n","\n","Epoch 00051: val_loss did not improve from 1.73695\n","Epoch 52/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3903 - root_mean_squared_error: 2.5398 - val_loss: 1.7454 - val_root_mean_squared_error: 1.8696\n","\n","Epoch 00052: val_loss did not improve from 1.73695\n","Epoch 53/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3992 - root_mean_squared_error: 2.5550 - val_loss: 1.7872 - val_root_mean_squared_error: 1.9272\n","\n","Epoch 00053: val_loss did not improve from 1.73695\n","Epoch 54/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3627 - root_mean_squared_error: 2.5095 - val_loss: 1.8003 - val_root_mean_squared_error: 1.9429\n","\n","Epoch 00054: val_loss did not improve from 1.73695\n","Epoch 55/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3839 - root_mean_squared_error: 2.5343 - val_loss: 1.7953 - val_root_mean_squared_error: 1.9378\n","\n","Epoch 00055: val_loss did not improve from 1.73695\n","Epoch 56/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.4056 - root_mean_squared_error: 2.5567 - val_loss: 1.7980 - val_root_mean_squared_error: 1.9099\n","\n","Epoch 00056: val_loss did not improve from 1.73695\n","Epoch 57/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3780 - root_mean_squared_error: 2.5277 - val_loss: 1.7576 - val_root_mean_squared_error: 1.8968\n","\n","Epoch 00057: val_loss did not improve from 1.73695\n","Epoch 58/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3878 - root_mean_squared_error: 2.5339 - val_loss: 1.7821 - val_root_mean_squared_error: 1.9119\n","\n","Epoch 00058: val_loss did not improve from 1.73695\n","Epoch 59/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3714 - root_mean_squared_error: 2.5111 - val_loss: 1.8607 - val_root_mean_squared_error: 1.9910\n","\n","Epoch 00059: val_loss did not improve from 1.73695\n","Epoch 60/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3881 - root_mean_squared_error: 2.5287 - val_loss: 1.7591 - val_root_mean_squared_error: 1.9010\n","\n","Epoch 00060: val_loss did not improve from 1.73695\n","Epoch 61/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3818 - root_mean_squared_error: 2.5353 - val_loss: 1.7669 - val_root_mean_squared_error: 1.8933\n","\n","Epoch 00061: val_loss did not improve from 1.73695\n","Epoch 62/100\n","2188/2188 [==============================] - 14s 6ms/step - loss: 2.3714 - root_mean_squared_error: 2.5176 - val_loss: 1.7612 - val_root_mean_squared_error: 1.8884\n","\n","Epoch 00062: val_loss did not improve from 1.73695\n","Epoch 63/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3703 - root_mean_squared_error: 2.5124 - val_loss: 2.0120 - val_root_mean_squared_error: 2.1337\n","\n","Epoch 00063: val_loss did not improve from 1.73695\n","Epoch 64/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3751 - root_mean_squared_error: 2.5160 - val_loss: 1.7881 - val_root_mean_squared_error: 1.9062\n","\n","Epoch 00064: val_loss did not improve from 1.73695\n","Epoch 65/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3800 - root_mean_squared_error: 2.5288 - val_loss: 1.8164 - val_root_mean_squared_error: 1.9476\n","\n","Epoch 00065: val_loss did not improve from 1.73695\n","Epoch 66/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3629 - root_mean_squared_error: 2.5082 - val_loss: 1.7647 - val_root_mean_squared_error: 1.9004\n","\n","Epoch 00066: val_loss did not improve from 1.73695\n","Epoch 67/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3386 - root_mean_squared_error: 2.4770 - val_loss: 1.8668 - val_root_mean_squared_error: 1.9909\n","\n","Epoch 00067: val_loss did not improve from 1.73695\n","Epoch 68/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3496 - root_mean_squared_error: 2.5004 - val_loss: 1.7350 - val_root_mean_squared_error: 1.8768\n","\n","Epoch 00068: val_loss improved from 1.73695 to 1.73498, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-068--1.73498.hdf5\n","Epoch 69/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.4054 - root_mean_squared_error: 2.5589 - val_loss: 1.7644 - val_root_mean_squared_error: 1.9014\n","\n","Epoch 00069: val_loss did not improve from 1.73498\n","Epoch 70/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3536 - root_mean_squared_error: 2.5018 - val_loss: 1.7557 - val_root_mean_squared_error: 1.8829\n","\n","Epoch 00070: val_loss did not improve from 1.73498\n","Epoch 71/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3782 - root_mean_squared_error: 2.5199 - val_loss: 1.7827 - val_root_mean_squared_error: 1.9142\n","\n","Epoch 00071: val_loss did not improve from 1.73498\n","Epoch 72/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3409 - root_mean_squared_error: 2.4781 - val_loss: 1.8875 - val_root_mean_squared_error: 2.0318\n","\n","Epoch 00072: val_loss did not improve from 1.73498\n","Epoch 73/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3496 - root_mean_squared_error: 2.4957 - val_loss: 1.7581 - val_root_mean_squared_error: 1.8967\n","\n","Epoch 00073: val_loss did not improve from 1.73498\n","Epoch 74/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3373 - root_mean_squared_error: 2.4802 - val_loss: 1.7932 - val_root_mean_squared_error: 1.9190\n","\n","Epoch 00074: val_loss did not improve from 1.73498\n","Epoch 75/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3574 - root_mean_squared_error: 2.5022 - val_loss: 1.8251 - val_root_mean_squared_error: 1.9480\n","\n","Epoch 00075: val_loss did not improve from 1.73498\n","Epoch 76/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3521 - root_mean_squared_error: 2.4868 - val_loss: 1.8333 - val_root_mean_squared_error: 1.9693\n","\n","Epoch 00076: val_loss did not improve from 1.73498\n","Epoch 77/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3428 - root_mean_squared_error: 2.4954 - val_loss: 1.7941 - val_root_mean_squared_error: 1.9248\n","\n","Epoch 00077: val_loss did not improve from 1.73498\n","Epoch 78/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3593 - root_mean_squared_error: 2.5114 - val_loss: 1.7545 - val_root_mean_squared_error: 1.8998\n","\n","Epoch 00078: val_loss did not improve from 1.73498\n","Epoch 79/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3530 - root_mean_squared_error: 2.4960 - val_loss: 1.7594 - val_root_mean_squared_error: 1.8819\n","\n","Epoch 00079: val_loss did not improve from 1.73498\n","Epoch 80/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3480 - root_mean_squared_error: 2.4958 - val_loss: 1.8432 - val_root_mean_squared_error: 1.9700\n","\n","Epoch 00080: val_loss did not improve from 1.73498\n","Epoch 81/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3579 - root_mean_squared_error: 2.5007 - val_loss: 1.8510 - val_root_mean_squared_error: 1.9904\n","\n","Epoch 00081: val_loss did not improve from 1.73498\n","Epoch 82/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3599 - root_mean_squared_error: 2.5082 - val_loss: 1.8217 - val_root_mean_squared_error: 1.9551\n","\n","Epoch 00082: val_loss did not improve from 1.73498\n","Epoch 83/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3626 - root_mean_squared_error: 2.5142 - val_loss: 1.8956 - val_root_mean_squared_error: 2.0297\n","\n","Epoch 00083: val_loss did not improve from 1.73498\n","Epoch 84/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3808 - root_mean_squared_error: 2.5285 - val_loss: 1.8057 - val_root_mean_squared_error: 1.9407\n","\n","Epoch 00084: val_loss did not improve from 1.73498\n","Epoch 85/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3688 - root_mean_squared_error: 2.5133 - val_loss: 1.8613 - val_root_mean_squared_error: 2.0014\n","\n","Epoch 00085: val_loss did not improve from 1.73498\n","Epoch 86/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3347 - root_mean_squared_error: 2.4781 - val_loss: 1.8420 - val_root_mean_squared_error: 1.9817\n","\n","Epoch 00086: val_loss did not improve from 1.73498\n","Epoch 87/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3593 - root_mean_squared_error: 2.5083 - val_loss: 1.7640 - val_root_mean_squared_error: 1.8919\n","\n","Epoch 00087: val_loss did not improve from 1.73498\n","Epoch 88/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3609 - root_mean_squared_error: 2.5057 - val_loss: 1.8374 - val_root_mean_squared_error: 1.9842\n","\n","Epoch 00088: val_loss did not improve from 1.73498\n","Epoch 89/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3745 - root_mean_squared_error: 2.5289 - val_loss: 1.8802 - val_root_mean_squared_error: 2.0260\n","\n","Epoch 00089: val_loss did not improve from 1.73498\n","Epoch 90/100\n","2188/2188 [==============================] - 14s 7ms/step - loss: 2.3774 - root_mean_squared_error: 2.5280 - val_loss: 1.7807 - val_root_mean_squared_error: 1.9259\n","\n","Epoch 00090: val_loss did not improve from 1.73498\n","Epoch 91/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3440 - root_mean_squared_error: 2.4905 - val_loss: 1.8602 - val_root_mean_squared_error: 1.9979\n","\n","Epoch 00091: val_loss did not improve from 1.73498\n","Epoch 92/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3558 - root_mean_squared_error: 2.5082 - val_loss: 1.9216 - val_root_mean_squared_error: 2.0616\n","\n","Epoch 00092: val_loss did not improve from 1.73498\n","Epoch 93/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3608 - root_mean_squared_error: 2.5080 - val_loss: 1.7962 - val_root_mean_squared_error: 1.9239\n","\n","Epoch 00093: val_loss did not improve from 1.73498\n","Epoch 94/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3549 - root_mean_squared_error: 2.4989 - val_loss: 1.8401 - val_root_mean_squared_error: 1.9729\n","\n","Epoch 00094: val_loss did not improve from 1.73498\n","Epoch 95/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3588 - root_mean_squared_error: 2.5092 - val_loss: 1.7770 - val_root_mean_squared_error: 1.9028\n","\n","Epoch 00095: val_loss did not improve from 1.73498\n","Epoch 96/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3840 - root_mean_squared_error: 2.5423 - val_loss: 1.8224 - val_root_mean_squared_error: 1.9596\n","\n","Epoch 00096: val_loss did not improve from 1.73498\n","Epoch 97/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3824 - root_mean_squared_error: 2.5326 - val_loss: 1.8424 - val_root_mean_squared_error: 1.9763\n","\n","Epoch 00097: val_loss did not improve from 1.73498\n","Epoch 98/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3401 - root_mean_squared_error: 2.4857 - val_loss: 1.7270 - val_root_mean_squared_error: 1.8679\n","\n","Epoch 00098: val_loss improved from 1.73498 to 1.72701, saving model to /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-098--1.72701.hdf5\n","Epoch 99/100\n","2188/2188 [==============================] - 16s 7ms/step - loss: 2.3342 - root_mean_squared_error: 2.4735 - val_loss: 1.7894 - val_root_mean_squared_error: 1.9223\n","\n","Epoch 00099: val_loss did not improve from 1.72701\n","Epoch 100/100\n","2188/2188 [==============================] - 15s 7ms/step - loss: 2.3617 - root_mean_squared_error: 2.5153 - val_loss: 1.8304 - val_root_mean_squared_error: 1.9810\n","\n","Epoch 00100: val_loss did not improve from 1.72701\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"nyzOrYEVbvUA","executionInfo":{"status":"ok","timestamp":1622194970270,"user_tz":-330,"elapsed":479,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"05d37267-42ae-44b8-fccc-0f377abdb3a4"},"source":["plt.plot(NN_model1.history['loss'])\n","plt.plot(NN_model1.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"9rSmUW1B0fn-","executionInfo":{"status":"ok","timestamp":1622195068795,"user_tz":-330,"elapsed":637,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["wights_file = '/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/weights/Weights-098--1.72701.hdf5' # choose the best checkpoint \n","NN_model.load_weights(wights_file) # load it\n","NN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])\n"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zscBG5IYJzeU","executionInfo":{"status":"ok","timestamp":1622195074765,"user_tz":-330,"elapsed":594,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"af0445f4-a5fc-4921-ef17-b491a10515be"},"source":["df=pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/TEST.csv')\n","df=df[[\"distance\",\"surge_multiplier\",\"cab_provider\",\"cab_type\"]]\n","#np.unique(df['cab_type'])\n","df[\"cab_provider\"].replace([\"Lyft\",\"Uber\"],[0,1],inplace=True)\n","df[\"cab_type\"].replace(['Black', 'Black SUV', 'Lux', 'Lux Black', 'Lux Black XL', 'Lyft','Lyft XL', 'Shared', 'UberPool', 'UberX', 'UberXL', 'WAV'],[1,2,3,4,5,6,7,8,9,10,11,12],inplace=True)\n","x_test = df.iloc[:, 0:4].values\n","div=np.max(x_test[:,0])\n","x_test[:,0]=x_test[:,0]/div\n","#label_encoder = LabelEncoder()\n","#integer_encoded = label_encoder.fit_transform(x_test[:,1])\n","#onehot_encoder = OneHotEncoder(sparse=False)\n","#integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","#one = onehot_encoder.fit_transform(integer_encoded)\n","#print(one.shape)\n","div=np.max(x_test[:,1])\n","x_test[:,1]=x_test[:,1]/div\n","\n","label_encoder = LabelEncoder()\n","integer_encoded = label_encoder.fit_transform(x_test[:,2])\n","onehot_encoder = OneHotEncoder(sparse=False)\n","integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","two = onehot_encoder.fit_transform(integer_encoded)\n","#print(two.shape)\n","label_encoder = LabelEncoder()\n","integer_encoded = label_encoder.fit_transform(x_test[:,3])\n","onehot_encoder = OneHotEncoder(sparse=False)\n","integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)\n","three = onehot_encoder.fit_transform(integer_encoded)\n","#print(three.shape)\n","x_test=np.concatenate((x_test[:,0].reshape(25000,1),x_test[:,1].reshape(25000,1),two,three),axis=1)\n","x_test"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.07742782, 0.33333333, 1.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.07742782, 0.33333333, 1.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.89632546, 0.33333333, 0.        , ..., 1.        , 0.        ,\n","        0.        ],\n","       ...,\n","       [0.40026247, 0.33333333, 0.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.38845144, 0.33333333, 1.        , ..., 0.        , 0.        ,\n","        0.        ],\n","       [0.38845144, 0.33333333, 1.        , ..., 0.        , 0.        ,\n","        0.        ]])"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"Hwvm7spUF0ZI","executionInfo":{"status":"ok","timestamp":1622195078043,"user_tz":-330,"elapsed":1520,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["predictions = NN_model.predict(x_test)"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"H-pKeVs0LAAs","executionInfo":{"status":"ok","timestamp":1622195079719,"user_tz":-330,"elapsed":4,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["predictions=predictions.reshape(25000)"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lx40Tt5-rBqx","executionInfo":{"status":"ok","timestamp":1622195081801,"user_tz":-330,"elapsed":4,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"b5bfe699-2486-4933-f789-e869b16c61b0"},"source":["predictions[0:13]"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([11.236354 , 27.105553 , 15.788712 , 13.229697 ,  9.827417 ,\n","        9.597673 ,  5.2861104,  7.2189364, 27.919163 ,  5.648359 ,\n","       34.379505 , 20.025707 , 15.835963 ], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"g97Hvq6rLpfR","executionInfo":{"status":"ok","timestamp":1622195156117,"user_tz":-330,"elapsed":801,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}}},"source":["index=[i for i in range(25000)]\n","\n","df = pd.DataFrame({\"index\" : index, \"fare\" : predictions})\n","df.to_csv(\"/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/submission1.csv\", index=False)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vj6gqzW1MtGl"},"source":["df=pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/TRAIN.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"yjooPB-Zjrw1","executionInfo":{"status":"ok","timestamp":1618845910024,"user_tz":-330,"elapsed":1561,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"58ecb54e-6f07-4958-9e28-8d4d4f1b2642"},"source":["a=df[(df[\"source\"]==\"Boston University\") & (df[\"destination\"]==\"Theatre District\") & (df[\"cab_provider\"]==\"Lyft\") & (df[\"cab_type\"]==\"Shared\") & (df[\"distance\"]==2.91)]\n","#print(pd.to_datetime(a['time_stamp'], unit='ms').dt.hour)\n","a"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>time_stamp</th>\n","      <th>cab_provider</th>\n","      <th>source</th>\n","      <th>destination</th>\n","      <th>distance</th>\n","      <th>surge_multiplier</th>\n","      <th>cab_type</th>\n","      <th>fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3789</th>\n","      <td>3789</td>\n","      <td>1543223290029</td>\n","      <td>Lyft</td>\n","      <td>Boston University</td>\n","      <td>Theatre District</td>\n","      <td>2.91</td>\n","      <td>1.0</td>\n","      <td>Shared</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>10381</th>\n","      <td>10381</td>\n","      <td>1543238410189</td>\n","      <td>Lyft</td>\n","      <td>Boston University</td>\n","      <td>Theatre District</td>\n","      <td>2.91</td>\n","      <td>1.0</td>\n","      <td>Shared</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>31514</th>\n","      <td>31514</td>\n","      <td>1543279334404</td>\n","      <td>Lyft</td>\n","      <td>Boston University</td>\n","      <td>Theatre District</td>\n","      <td>2.91</td>\n","      <td>1.0</td>\n","      <td>Shared</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>61748</th>\n","      <td>61748</td>\n","      <td>1543316421937</td>\n","      <td>Lyft</td>\n","      <td>Boston University</td>\n","      <td>Theatre District</td>\n","      <td>2.91</td>\n","      <td>1.0</td>\n","      <td>Shared</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>68763</th>\n","      <td>68763</td>\n","      <td>1543325064393</td>\n","      <td>Lyft</td>\n","      <td>Boston University</td>\n","      <td>Theatre District</td>\n","      <td>2.91</td>\n","      <td>1.0</td>\n","      <td>Shared</td>\n","      <td>7.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       index     time_stamp cab_provider  ... surge_multiplier cab_type  fare\n","3789    3789  1543223290029         Lyft  ...              1.0   Shared  11.0\n","10381  10381  1543238410189         Lyft  ...              1.0   Shared   7.0\n","31514  31514  1543279334404         Lyft  ...              1.0   Shared   7.0\n","61748  61748  1543316421937         Lyft  ...              1.0   Shared   7.0\n","68763  68763  1543325064393         Lyft  ...              1.0   Shared   7.0\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jmm0sAncjyp3","executionInfo":{"status":"ok","timestamp":1618845968319,"user_tz":-330,"elapsed":1326,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"78c0c79e-d21a-47a6-dd95-65a80db51127"},"source":["x=a.iloc[3]['time_stamp']\n","print(pd.to_datetime(x,unit='ms'))\n","x=a.iloc[4]['time_stamp']\n","print(pd.to_datetime(x,unit='ms'))\n","print(x_test[6])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2018-11-27 11:00:21.937000\n","2018-11-27 13:24:24.393000\n","[1.55 1.   0.   8.  ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yAy4115ikbNA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TAD__xDN3QzI","executionInfo":{"elapsed":3678,"status":"ok","timestamp":1618462190274,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"},"user_tz":-330},"outputId":"33e5e48f-3cfd-4d61-cdf6-a751f3290ad6"},"source":["!pip3 install xgboost"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.4.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.19.5)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JlgGkcAT1stD","executionInfo":{"elapsed":1966,"status":"ok","timestamp":1618462154720,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"},"user_tz":-330},"outputId":"d7db0057-1b9c-437a-f732-84ffb486720e"},"source":["!python setup.py install --use-cuda --use-nccl # Install the XGBoost to your current Python environment.\n","!python setup.py build    # Build the Python package.\n","!python setup.py build_ext # Build only the C++ core.\n","!python setup.py sdist     # Create a source distribution\n","!python setup.py bdist     # Create a binary distribution\n","!python setup.py bdist_wheel # Create a binary distribution with wheel format"],"execution_count":null,"outputs":[{"output_type":"stream","text":["python3: can't open file 'setup.py': [Errno 2] No such file or directory\n","python3: can't open file 'setup.py': [Errno 2] No such file or directory\n","python3: can't open file 'setup.py': [Errno 2] No such file or directory\n","python3: can't open file 'setup.py': [Errno 2] No such file or directory\n","python3: can't open file 'setup.py': [Errno 2] No such file or directory\n","python3: can't open file 'setup.py': [Errno 2] No such file or directory\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"d58_7I0p3ElD"},"source":["from numpy import mean\n","from numpy import std\n","from numpy import absolute\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import RepeatedKFold\n","from sklearn.metrics import mean_squared_error\n","from xgboost import XGBRegressor"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6V8Vs2Kf3oSk"},"source":["model = XGBRegressor(n_estimators=5000,learning_rate=0.27,importance_type='gain',objective='reg:squarederror')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5bSEvrVG5OuQ","executionInfo":{"status":"ok","timestamp":1621073133407,"user_tz":-330,"elapsed":115173,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"cb0ff7f0-2cda-45d7-a736-5cadd111f41e"},"source":["model.fit(x, y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","             colsample_bynode=1, colsample_bytree=1, gamma=0,\n","             importance_type='gain', learning_rate=0.27, max_delta_step=0,\n","             max_depth=3, min_child_weight=1, missing=None, n_estimators=5000,\n","             n_jobs=1, nthread=None, objective='reg:squarederror',\n","             random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n","             seed=None, silent=None, subsample=1, verbosity=1)"]},"metadata":{"tags":[]},"execution_count":337}]},{"cell_type":"code","metadata":{"id":"5vbYPEGE8DGR"},"source":["pred = model.predict(x_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IytkZ3F48-NT","executionInfo":{"status":"ok","timestamp":1621073137181,"user_tz":-330,"elapsed":118211,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"292c331a-c15a-497d-d025-bc1f1b69cb73"},"source":["pred[0:12]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([10.79021  , 26.853662 , 17.607172 , 13.154479 ,  9.8503275,\n","        8.355899 ,  5.14441  ,  7.017725 , 27.827204 ,  5.7207055,\n","       33.800793 , 20.54173  ], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":339}]},{"cell_type":"code","metadata":{"id":"SixgDcpw9djl"},"source":["a=np.array([11,26,18.5,11.5,9,10.5,7,7,26,5,32.5,19.5])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v6fh8XHAhtN2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621073137182,"user_tz":-330,"elapsed":116253,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"1d07c7da-d4bb-4862-c10b-d5514add09d1"},"source":["mean_squared_error(a,pred[0:12],squared=False)\n","#best-1.0915 learningrate=0.27"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.281480380107056"]},"metadata":{"tags":[]},"execution_count":341}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mme0Kjap6w6Y","executionInfo":{"status":"ok","timestamp":1621072781454,"user_tz":-330,"elapsed":625,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"53a63be5-02cc-41e2-b7dc-6ff8ad214dad"},"source":["x[5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 2.19,  1.  ,  1.  , 10.  ])"]},"metadata":{"tags":[]},"execution_count":327}]},{"cell_type":"code","metadata":{"id":"cHP6VQLsmIf6"},"source":["index=[i for i in range(25000)]\n","\n","df = pd.DataFrame({\"index\" : index, \"fare\" : pred})\n","df.to_csv(\"/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/submission1.csv\", index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vVORKa-qmUiB"},"source":["  #All time best--1.75133  learningrate=0.2,nestimators=1000"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rfhY_3uCsiq8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618841083900,"user_tz":-330,"elapsed":1411,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"f6023de0-cfd1-490a-91e4-23cf8187b54b"},"source":["from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import cross_val_score\n","regressor = DecisionTreeRegressor(random_state=1,min_samples_leaf=3,min_impurity_decrease=0.002889,max_features=3)\n","regressor.fit(x,y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,\n","                      max_features=3, max_leaf_nodes=None,\n","                      min_impurity_decrease=0.002889, min_impurity_split=None,\n","                      min_samples_leaf=3, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, presort='deprecated',\n","                      random_state=1, splitter='best')"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7u2mFtVhaPev","executionInfo":{"status":"ok","timestamp":1618841084274,"user_tz":-330,"elapsed":1413,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"44ceee71-a194-4795-dbe0-012aaec85629"},"source":["pred=regressor.predict(x_test)\n","pred"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([11.00301205, 26.77012248, 15.38246269, ..., 33.65543735,\n","        7.1675    , 20.07637795])"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2C81mxLxabfI","executionInfo":{"status":"ok","timestamp":1618841084275,"user_tz":-330,"elapsed":1064,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"9eb98fba-3f40-44a7-e207-2a9abfccd701"},"source":["a"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([11. , 26. , 18.5, 11.5,  9. , 10.5,  7. ,  7. , 26. ,  5. , 32.5,\n","       19.5])"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7DvpNd5zbTaX","executionInfo":{"status":"ok","timestamp":1618841087185,"user_tz":-330,"elapsed":959,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"0463e486-b425-4bc8-a602-3578c8fa10af"},"source":["pred[0:12]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([11.00301205, 26.77012248, 15.38246269, 13.50610583,  8.6361828 ,\n","       10.0372807 ,  5.42586207,  8.6361828 , 27.58658923,  9.73079438,\n","       33.99333333, 21.25074331])"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"KMYnyfuVbVxf"},"source":["#Rough"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NRpaeh-BA_Dh"},"source":["def build_model(hp):\n","    model = Sequential()\n","    for i in range(hp.Int('num_layers', 2, 20)):\n","        model.add(Dense(units=hp.Int('units_' + str(i),\n","                                            min_value=5,\n","                                            max_value=30,\n","                                            step=1),\n","                               activation='relu',\n","                               kernel_initializer=tf.keras.initializers.HeNormal()))\n","    model.add(Dense(1, kernel_initializer=tf.keras.initializers.HeNormal(),activation='linear'))\n","    model.compile(\n","        optimizer=tf.keras.optimizers.Adam(\n","            hp.Choice('learning_rate', [1e-2, 1e-1, 1e-3, 0.005, 0.7, 0.85, 1.5, 1.7])),\n","        loss=root_mean_squared_error,\n","        metrics=[tf.keras.metrics.RootMeanSquaredError()])\n","    return model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cTorXXMLBEii"},"source":["#tuner = kt.Hyperband(model_builder,\n","#                     objective='val_loss',\n","#                     max_epochs=10,\n","#                     factor=3,\n","#                     directory='/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/Tuning/',\n","#                     project_name='cab price')\n","tuner = RandomSearch(\n","    build_model,\n","    objective='val_loss',\n","    max_trials=5,\n","    executions_per_trial=2,\n","    directory='/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/Tuning/',\n","    project_name='cabprice')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fZ6SX2tYK9do","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619498199740,"user_tz":-330,"elapsed":822,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"5285855f-bbf6-419a-baf1-17930d671a5b"},"source":["\n","tuner.search_space_summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Search space summary\n","Default search space size: 4\n","num_layers (Int)\n","{'default': None, 'conditions': [], 'min_value': 2, 'max_value': 20, 'step': 1, 'sampling': None}\n","units_0 (Int)\n","{'default': None, 'conditions': [], 'min_value': 5, 'max_value': 30, 'step': 1, 'sampling': None}\n","units_1 (Int)\n","{'default': None, 'conditions': [], 'min_value': 5, 'max_value': 30, 'step': 1, 'sampling': None}\n","learning_rate (Choice)\n","{'default': 0.01, 'conditions': [], 'values': [0.01, 0.1, 0.001, 0.005, 0.7, 0.85, 1.5, 1.7], 'ordered': True}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_PPofkayK-e2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619499479222,"user_tz":-330,"elapsed":1196884,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"598261da-ec4c-4abc-84cf-b0d4395b630a"},"source":["\n","tuner.search(x, y,\n","             epochs=25,\n","             validation_split=0.2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Trial 5 Complete [00h 04m 02s]\n","val_loss: 9.311394214630127\n","\n","Best val_loss So Far: 1.7315409183502197\n","Total elapsed time: 00h 19m 55s\n","INFO:tensorflow:Oracle triggered exit\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9sJuTkjSBGmw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619499549706,"user_tz":-330,"elapsed":1213,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"88d17f06-1287-46be-a793-1c70d1495713"},"source":["tuner.results_summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Results summary\n","Results in /content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/Tuning/cabprice\n","Showing 10 best trials\n","Objective(name='val_loss', direction='min')\n","Trial summary\n","Hyperparameters:\n","num_layers: 9\n","units_0: 24\n","units_1: 6\n","learning_rate: 0.001\n","units_2: 17\n","units_3: 27\n","units_4: 27\n","units_5: 13\n","units_6: 8\n","units_7: 14\n","units_8: 13\n","units_9: 26\n","units_10: 14\n","units_11: 14\n","units_12: 28\n","units_13: 24\n","units_14: 16\n","units_15: 14\n","units_16: 6\n","Score: 1.7315409183502197\n","Trial summary\n","Hyperparameters:\n","num_layers: 17\n","units_0: 18\n","units_1: 6\n","learning_rate: 0.1\n","units_2: 5\n","units_3: 5\n","units_4: 5\n","units_5: 5\n","units_6: 5\n","units_7: 5\n","units_8: 5\n","units_9: 5\n","units_10: 5\n","units_11: 5\n","units_12: 5\n","units_13: 5\n","units_14: 5\n","units_15: 5\n","units_16: 5\n","Score: 9.311380863189697\n","Trial summary\n","Hyperparameters:\n","num_layers: 11\n","units_0: 19\n","units_1: 27\n","learning_rate: 1.7\n","units_2: 22\n","units_3: 27\n","units_4: 19\n","units_5: 24\n","units_6: 10\n","units_7: 9\n","units_8: 16\n","units_9: 13\n","units_10: 9\n","units_11: 16\n","units_12: 30\n","units_13: 20\n","units_14: 23\n","units_15: 19\n","units_16: 19\n","units_17: 14\n","Score: 9.311394214630127\n","Trial summary\n","Hyperparameters:\n","num_layers: 5\n","units_0: 7\n","units_1: 18\n","learning_rate: 0.7\n","units_2: 29\n","units_3: 24\n","units_4: 30\n","units_5: 10\n","units_6: 12\n","units_7: 5\n","units_8: 23\n","units_9: 28\n","units_10: 15\n","units_11: 9\n","units_12: 27\n","units_13: 22\n","units_14: 25\n","units_15: 8\n","units_16: 16\n","Score: 9.311543941497803\n","Trial summary\n","Hyperparameters:\n","num_layers: 18\n","units_0: 28\n","units_1: 29\n","learning_rate: 1.7\n","units_2: 24\n","units_3: 21\n","units_4: 20\n","units_5: 24\n","units_6: 7\n","units_7: 21\n","units_8: 21\n","units_9: 24\n","units_10: 6\n","units_11: 21\n","units_12: 10\n","units_13: 8\n","units_14: 9\n","units_15: 6\n","units_16: 12\n","units_17: 5\n","Score: 9.311846733093262\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TFZ4wOJUBTHF"},"source":["eval_result = hypermodel.evaluate(img_test, label_test)\n","print(\"[test loss]:\", eval_result)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TsatMkMaBXb9"},"source":["#new"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"esqh0oGETwr1","executionInfo":{"status":"error","timestamp":1619460624747,"user_tz":-330,"elapsed":6047,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"ddbcdd3f-c910-4fc5-aa2d-bb29a432a4ea"},"source":["from kerastuner import HyperModel\n","\n","\n","class MyHyperModel(HyperModel):\n","\n","    def __init__(self, num_classes):\n","        self.num_classes = num_classes\n","\n","    def build(self, hp):\n","        model = Sequential()\n","        model.add(Dense(units=hp.Int('units',\n","                                            min_value=32,\n","                                            max_value=512,\n","                                            step=32),\n","                               activation='relu'))\n","        model.add(Dense(1, kernel_initializer=tf.keras.initializers.HeNormal(),activation='linear'))\n","        model.compile(optimizer=tf.keras.optimizers.Adam(hp.Choice('learning_rate', [1e-2, 1e-3, 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9])),loss=root_mean_squared_error,metrics=[tf.keras.metrics.RootMeanSquaredError()])\n","        return model\n","\n","\n","hypermodel = MyHyperModel(num_classes=10)\n","\n","tuner = RandomSearch(\n","    hypermodel,\n","    objective='val_loss',\n","    max_trials=10,\n","    directory='/content/gdrive/MyDrive/Colab Notebooks/cab_fare_prediction_ai_challenge-dataset/Tuning/',\n","    project_name='cabbooking')\n","\n","tuner.search(x, y,\n","             epochs=5,\n","             validation_split=0.3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","Search: Running Trial #1\n","\n","Hyperparameter    |Value             |Best Value So Far \n","units             |128               |?                 \n","learning_rate     |0.01              |?                 \n","\n","Epoch 1/5\n","2187/2188 [============================>.] - ETA: 0s - loss: 3.2640 - root_mean_squared_error: 4.1409"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-dbb351535dc3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m tuner.search(x, y,\n\u001b[1;32m     31\u001b[0m              \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m              validation_split=0.3)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/engine/base_tuner.py\u001b[0m in \u001b[0;36msearch\u001b[0;34m(self, *fit_args, **fit_kwargs)\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_trial_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_trial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_trial_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_search_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/engine/multi_execution_tuner.py\u001b[0m in \u001b[0;36mrun_trial\u001b[0;34m(self, trial, *fit_args, **fit_kwargs)\u001b[0m\n\u001b[1;32m     94\u001b[0m             \u001b[0mcopied_fit_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'callbacks'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m             \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_build_and_fit_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopied_fit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_values\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moracle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobjective\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdirection\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'min'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/kerastuner/engine/tuner.py\u001b[0m in \u001b[0;36m_build_and_fit_model\u001b[0;34m(self, trial, fit_args, fit_kwargs)\u001b[0m\n\u001b[1;32m    139\u001b[0m         \"\"\"\n\u001b[1;32m    140\u001b[0m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhypermodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrial\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhyperparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 141\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrun_trial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrial\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mfit_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1139\u001b[0m               \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mworkers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1140\u001b[0m               \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1141\u001b[0;31m               return_dict=True)\n\u001b[0m\u001b[1;32m   1142\u001b[0m           \u001b[0mval_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'val_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1143\u001b[0m           \u001b[0mepoch_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict)\u001b[0m\n\u001b[1;32m   1387\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep_num\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_r\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1388\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1389\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtest_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    860\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 862\u001b[0;31m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    863\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_created_variables\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    864\u001b[0m         raise ValueError(\"Creating variables on a non-first call to a function\"\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"C_nR2UcAUt2b","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"error","timestamp":1619437735052,"user_tz":-330,"elapsed":2157,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"15805ff3-a117-4b43-eb7a-b97d124cc483"},"source":["models = tuner.get_best_models(num_models=2)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-0e9abd1136c8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuner\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_best_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_models\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'tuner' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"id":"V7BbtM_iXo0w","executionInfo":{"status":"error","timestamp":1619427053089,"user_tz":-330,"elapsed":1194,"user":{"displayName":"Bhavik Tandel","photoUrl":"","userId":"11155813174787088061"}},"outputId":"6283d402-f98f-40bc-bf06-dbf086527ae3"},"source":["models"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-181ea416d56e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodels\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'models' is not defined"]}]},{"cell_type":"code","metadata":{"id":"4_Nz0qmTXwRY"},"source":[""],"execution_count":null,"outputs":[]}]}
